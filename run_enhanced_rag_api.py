#!/usr/bin/env python3
"""
Script de inicio para la API RAG mejorada con datos precargados
Inicializa autom√°ticamente el sistema con pol√≠ticas de RRHH
"""

import sys
import os
import asyncio
import logging
from pathlib import Path

# A√±adir el directorio src al path
sys.path.append(str(Path(__file__).parent / "src"))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """Funci√≥n principal para iniciar la API RAG mejorada"""
    
    print("üî• INICIANDO API RAG MEJORADA CON DATOS PRECARGADOS üî•")
    print("=" * 60)
    
    try:
        # Verificar que los archivos necesarios existan
        required_files = [
            "src/infrastructure/web/api/rag_enhanced_endpoints.py",
            "src/infrastructure/data/preloaded_hr_policies.py",
            "src/infrastructure/services/data_loader_service.py"
        ]
        
        missing_files = []
        for file_path in required_files:
            if not Path(file_path).exists():
                missing_files.append(file_path)
        
        if missing_files:
            logger.error("‚ùå Archivos requeridos no encontrados:")
            for file_path in missing_files:
                logger.error(f"   - {file_path}")
            return 1
        
        logger.info("‚úÖ Todos los archivos requeridos encontrados")
        
        # Importar y ejecutar la aplicaci√≥n
        logger.info("üöÄ Iniciando servidor FastAPI...")
        
        import uvicorn
        
        # Configuraci√≥n del servidor
        config = {
            "app": "infrastructure.web.api.rag_enhanced_endpoints:app",
            "host": "127.0.0.1",
            "port": 8002,
            "reload": True,
            "log_level": "info",
            "access_log": True
        }
        
        logger.info(f"üåê Servidor iniciando en http://{config['host']}:{config['port']}")
        logger.info("üìö Documentaci√≥n disponible en: http://127.0.0.1:8002/enhanced/docs")
        logger.info("üîç Health check en: http://127.0.0.1:8002/enhanced/health")
        logger.info("‚ÑπÔ∏è Informaci√≥n del sistema en: http://127.0.0.1:8002/enhanced")
        
        print("\nüéØ ENDPOINTS PRINCIPALES:")
        print("  ‚Ä¢ POST /enhanced/ask - Pregunta principal mejorada")
        print("  ‚Ä¢ GET  /enhanced/ask/quick - Pregunta r√°pida")
        print("  ‚Ä¢ POST /enhanced/system/initialize - Inicializar sistema")
        print("  ‚Ä¢ GET  /enhanced/system/status - Estado del sistema")
        print("  ‚Ä¢ GET  /enhanced/data/info - Informaci√≥n de datos precargados")
        print("  ‚Ä¢ GET  /enhanced/search/faq - Buscar en FAQs")
        print("  ‚Ä¢ GET  /enhanced/categories - Categor√≠as con estad√≠sticas")
        print("  ‚Ä¢ GET  /enhanced/health - Health check mejorado")
        
        print("\nüìã DATOS PRECARGADOS INCLUIDOS:")
        print("  ‚Ä¢ Pol√≠ticas de Beneficios (seguro m√©dico, 401k, etc.)")
        print("  ‚Ä¢ Pol√≠ticas de Vacaciones (tiempo libre flexible)")
        print("  ‚Ä¢ Pol√≠ticas de Trabajo Remoto (modelo h√≠brido)")
        print("  ‚Ä¢ Pol√≠ticas de Desarrollo Profesional (20% time, capacitaci√≥n)")
        print("  ‚Ä¢ Pol√≠ticas de Diversidad e Inclusi√≥n")
        print("  ‚Ä¢ Pol√≠ticas de Compensaci√≥n")
        print("  ‚Ä¢ C√≥digo de Conducta y √âtica")
        print("  ‚Ä¢ Preguntas Frecuentes (FAQs)")
        
        print("\nüîß FUNCIONALIDADES AVANZADAS:")
        print("  ‚Ä¢ Carga autom√°tica de datos al inicio")
        print("  ‚Ä¢ B√∫squeda optimizada en pol√≠ticas precargadas")
        print("  ‚Ä¢ Filtrado por departamento y categor√≠a")
        print("  ‚Ä¢ B√∫squeda espec√≠fica en FAQs")
        print("  ‚Ä¢ Health checks detallados")
        print("  ‚Ä¢ Estad√≠sticas de uso y rendimiento")
        
        print(f"\n{'='*60}")
        print("üöÄ INICIANDO SERVIDOR...")
        print("   Presiona Ctrl+C para detener")
        print(f"{'='*60}\n")
        
        # Iniciar servidor
        uvicorn.run(**config)
        
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è Servidor detenido por el usuario")
        return 0
    except ImportError as e:
        logger.error(f"‚ùå Error de importaci√≥n: {e}")
        logger.error("üí° Aseg√∫rate de tener todas las dependencias instaladas")
        return 1
    except Exception as e:
        logger.error(f"‚ùå Error inesperado: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)

#!/usr/bin/env python3
"""
Script de prueba para el sistema RAG integrado
Verifica que todos los componentes funcionen correctamente
"""

import requests
import json
import time
import sys
from pathlib import Path

# A√±adir el directorio src al path
sys.path.append(str(Path(__file__).parent / "src"))

# URL base de la API
API_BASE_URL = "http://localhost:8000"

def print_section(title: str):
    """Imprime un t√≠tulo de secci√≥n"""
    print(f"\n{'='*60}")
    print(f"üî• {title}")
    print(f"{'='*60}")

def print_json(data, title: str = ""):
    """Imprime JSON formateado"""
    if title:
        print(f"\nüìã {title}:")
    print(json.dumps(data, indent=2, ensure_ascii=False, default=str))

def test_health_check():
    """Prueba el health check b√°sico"""
    print_section("HEALTH CHECK B√ÅSICO")
    
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print_json(response.json(), "Health Check")
            return True
        else:
            print(f"‚ùå Health check fall√≥: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error conectando a la API: {e}")
        print("üí° Aseg√∫rate de que la API est√© ejecut√°ndose en http://localhost:8000")
        return False

def test_integrated_system_status():
    """Prueba el estado del sistema integrado"""
    print_section("ESTADO DEL SISTEMA INTEGRADO")
    
    try:
        response = requests.get(f"{API_BASE_URL}/system/integrated/status", timeout=30)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print_json(data, "Estado del Sistema Integrado")
            
            system_info = data.get("system_info", {})
            if system_info.get("system_ready", False):
                print("‚úÖ Sistema integrado listo")
                return True
            else:
                print("‚ö†Ô∏è Sistema integrado no est√° listo")
                return False
        else:
            print(f"‚ùå Error obteniendo estado: {response.status_code}")
            print_json(response.json() if response.content else {}, "Error Response")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error: {e}")
        return False

def test_integrated_question(question: str, department: str = None):
    """Prueba una pregunta con el endpoint integrado"""
    print(f"\nüîç Probando pregunta integrada: '{question}'")
    
    try:
        data = {
            "question": question,
            "department": department,
            "use_ai": True,
            "top_k": 5
        }
        
        response = requests.post(
            f"{API_BASE_URL}/ask/integrated", 
            json=data, 
            timeout=30,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Respuesta: {result.get('answer', 'Sin respuesta')[:200]}...")
            print(f"üéØ Confianza: {result.get('confidence', 0):.2f}")
            print(f"üìö Fuentes: {len(result.get('sources', []))}")
            
            # Mostrar fuentes si existen
            sources = result.get('sources', [])
            if sources:
                print("üìñ Fuentes principales:")
                for i, source in enumerate(sources[:2], 1):
                    doc = source.get('document', {})
                    print(f"   {i}. {doc.get('title', 'Sin t√≠tulo')} (Categor√≠a: {doc.get('category', 'N/A')})")
            
            return True
        else:
            print(f"‚ùå Error: {response.status_code}")
            try:
                error_data = response.json()
                print_json(error_data, "Error Details")
            except:
                print(f"Response text: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error: {e}")
        return False

def test_original_endpoint(question: str, department: str = None):
    """Prueba el endpoint original para comparaci√≥n"""
    print(f"\nüîç Probando endpoint original: '{question}'")
    
    try:
        data = {
            "question": question,
            "department": department,
            "use_ai": True,
            "top_k": 5
        }
        
        response = requests.post(
            f"{API_BASE_URL}/ask", 
            json=data, 
            timeout=30,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Respuesta: {result.get('answer', 'Sin respuesta')[:200]}...")
            print(f"üéØ Confianza: {result.get('confidence', 0):.2f}")
            print(f"üìö Fuentes: {len(result.get('sources', []))}")
            return True
        else:
            print(f"‚ùå Error: {response.status_code}")
            try:
                error_data = response.json()
                print_json(error_data, "Error Details")
            except:
                print(f"Response text: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üî• PRUEBAS DEL SISTEMA RAG INTEGRADO üî•")
    
    # 1. Health check b√°sico
    if not test_health_check():
        print("\n‚ùå Health check fall√≥. Deteniendo pruebas.")
        return 1
    
    # 2. Estado del sistema integrado
    print("\n‚è≥ Esperando inicializaci√≥n del sistema integrado...")
    time.sleep(3)  # Dar tiempo para inicializaci√≥n
    
    if not test_integrated_system_status():
        print("\n‚ö†Ô∏è Sistema integrado no est√° listo, pero continuando con las pruebas...")
    
    # 3. Pruebas de preguntas
    print_section("PRUEBAS DE PREGUNTAS")
    
    test_questions = [
        {
            "question": "¬øCu√°les son los beneficios de salud disponibles?",
            "department": "rrhh",
            "description": "Pregunta sobre beneficios"
        },
        {
            "question": "¬øC√≥mo funciona la pol√≠tica de vacaciones?",
            "department": "rrhh",
            "description": "Pregunta sobre vacaciones"
        },
        {
            "question": "¬øPuedo trabajar desde casa?",
            "department": "rrhh",
            "description": "Pregunta sobre trabajo remoto"
        }
    ]
    
    integrated_success = 0
    original_success = 0
    
    for i, test in enumerate(test_questions, 1):
        print(f"\n--- PREGUNTA {i}: {test['description']} ---")
        
        # Probar endpoint integrado
        print("üî• ENDPOINT INTEGRADO:")
        if test_integrated_question(test["question"], test["department"]):
            integrated_success += 1
        
        # Probar endpoint original para comparaci√≥n
        print("\nüìä ENDPOINT ORIGINAL (comparaci√≥n):")
        if test_original_endpoint(test["question"], test["department"]):
            original_success += 1
        
        time.sleep(1)  # Pausa entre pruebas
    
    # 4. Resumen de resultados
    print_section("RESUMEN DE RESULTADOS")
    
    total_tests = len(test_questions)
    print(f"üìä Resultados de las pruebas:")
    print(f"   üî• Endpoint integrado: {integrated_success}/{total_tests} exitosas")
    print(f"   üìä Endpoint original: {original_success}/{total_tests} exitosas")
    
    if integrated_success > 0:
        print("\n‚úÖ El sistema RAG integrado est√° funcionando correctamente!")
        print("üéØ Los datos precargados est√°n disponibles y respondiendo preguntas.")
        
        if integrated_success > original_success:
            print("üöÄ El endpoint integrado est√° funcionando mejor que el original!")
        elif integrated_success == original_success:
            print("‚öñÔ∏è Ambos endpoints funcionan igualmente bien.")
        else:
            print("‚ö†Ô∏è El endpoint original funciona mejor, revisar integraci√≥n.")
    else:
        print("\n‚ùå El sistema RAG integrado no est√° funcionando correctamente.")
        print("üîß Revisar logs del servidor para m√°s detalles.")
    
    print(f"\nüîó Documentaci√≥n disponible en: {API_BASE_URL}/docs")
    print(f"üè• Health check en: {API_BASE_URL}/health")
    print(f"üìä Estado integrado en: {API_BASE_URL}/system/integrated/status")
    
    return 0 if integrated_success > 0 else 1

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Pruebas interrumpidas por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Error inesperado durante las pruebas: {e}")
        sys.exit(1)
